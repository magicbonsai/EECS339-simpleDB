package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    
    private final JoinPredicate predicate;
    private  OpIterator lhsChild, rhsChild;
    private boolean isOpen;
    private Tuple lhsTuple;
    private Tuple rhsTuple;
    
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
    	predicate = p;
    	lhsChild = child1;
    	rhsChild = child2;
    	isOpen = false;
    	lhsTuple = null;
    
    }

    public JoinPredicate getJoinPredicate() {
    	return predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
    	TupleDesc ltd = lhsChild.getTupleDesc();
    	return ltd.getFieldName(predicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
    	TupleDesc rtd = rhsChild.getTupleDesc();
    	return rtd.getFieldName(predicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
    	TupleDesc ltd = lhsChild.getTupleDesc();
    	TupleDesc rtd = rhsChild.getTupleDesc();
    	return TupleDesc.merge(ltd, rtd);

    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {

    	lhsChild.open();
    	rhsChild.open();
    	isOpen = true;
    	super.open();

    	// set up the iterator pointers
    	advanceLhs();
    	advanceRhs();    	

    }

    public void close() {
    	lhsChild.close();
    	rhsChild.close();
    	super.close();
    	isOpen = false;

   }

    public void rewind() throws DbException, TransactionAbortedException {
    	if(isOpen) {
    		lhsChild.rewind();
    		rhsChild.rewind();
        	advanceLhs();
        	advanceRhs();    	

    	}
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	

    	if(!isOpen) {
    		return null;
    	}

    	// pointers need to be initialized
    	while(lhsTuple != null) {
    		if(predicate.filter(lhsTuple, rhsTuple))  {
				Tuple out = emitTuple(lhsTuple, rhsTuple);
				advanceRhs();
				return out;
			}
			advanceRhs();
    	}

    	return null;
    }
    
    
    private Tuple emitTuple(Tuple lhs, Tuple rhs) {
    	int fieldNo = 0;
    	int i;
    	TupleDesc td = getTupleDesc();
    	Tuple out = new Tuple(td);
    	
		for(i = 0; i < lhsChild.getTupleDesc().numFields(); ++i) {
			out.setField(fieldNo, lhs.getField(i));
			++fieldNo;
		}
		
		for(i = 0; i < rhsChild.getTupleDesc().numFields(); ++i) {
			out.setField(fieldNo, rhs.getField(i));

			++fieldNo;
		}
		return out;
    }
    
    private void advanceLhs() throws TransactionAbortedException, DbException {
    	if(lhsChild.hasNext()) {
    		lhsTuple = lhsChild.next();
    	}
    	else {
    		lhsTuple = null;
    	}
    }
    
    private void advanceRhs() throws TransactionAbortedException, DbException {
    	if(rhsChild.hasNext()) {
    		rhsTuple = rhsChild.next();
    	}
    	else {
    		rhsChild.rewind();
    		if(lhsChild.hasNext()) {
    			lhsTuple = lhsChild.next();
    		}
    		else {
    			lhsTuple = null;
    		}
    		if(rhsChild.hasNext()) {
    			rhsTuple = rhsChild.next();
    		}
    		else {
    			rhsTuple = null;
    		}
    	}
    	
    	
    }
    
    
    @Override
    public OpIterator[] getChildren() {
    	OpIterator[] itrs = new OpIterator[2];
    	itrs[0] = lhsChild;
    	itrs[1] = rhsChild;
    	return itrs;
    }

    @Override
    public void setChildren(OpIterator[] children) {
    	lhsChild = children[0];
    	rhsChild = children[1];
    	
    }

}
